package EDLanguage.sandbox;
import java.time.LocalDate; // import the LocalDate class

/*Generated by MPS */

import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.parameter.DefaultParameters;
import repast.simphony.parameter.Parameters;

import java.util.ArrayList;

import repast.simphony.context.Context;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.RandomCartesianAdder;
import repast.simphony.space.continuous.StrictBorders;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import simcore.basicStructures.Board;
import simcore.basicStructures.PatientAdder;
import simcore.diagnosis.AsymptomaticInfectedInfectionState;
import simcore.diagnosis.ExposedInfectionState;
import simcore.diagnosis.SymptomaticInfectedInfectionState;
import simcore.diagnosis.InfectionState;
import simcore.diagnosis.InfectionStateType;
import simcore.diagnosis.InfectionStatus;
import simcore.diagnosis.RecoveredInfectionState;
import simcore.diagnosis.StaffRotaAdder;
import simcore.diagnosis.SusceptibleInfectionState;
import repast.simphony.valueLayer.GridValueLayer;
import simcore.basicStructures.Location;
import repast.simphony.space.continuous.NdPoint;

public class EDBuilder implements ContextBuilder<Object> {
	
  public Context build(Context<Object> context) {

    context.setId("EDProject");

    ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
    ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, new RandomCartesianAdder<Object>(), new StrictBorders(), 50, 50);

    GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
    Grid<Object> grid = gridFactory.createGrid("grid", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, 50, 50));
        
    context.add(new Board());
//    context.add(new PatientAdder(space, grid).WithTimeSpan(60));
    
    //create Infection States
    InfectionStateType pinfectionStateSusceptible = new SusceptibleInfectionState(0.02);
    InfectionStateType pinfectionStateExposed = new ExposedInfectionState(3, 3);
    InfectionStateType pinfectionStateSymptomaticInfected = new SymptomaticInfectedInfectionState(14, 14);
    InfectionStateType pinfectionStateAsymptomaticInfected = new AsymptomaticInfectedInfectionState(14, 14);
    InfectionStateType pinfectionStateRecovered = new RecoveredInfectionState(30, 120);
    
    // Set infection state ordering
    pinfectionStateSusceptible.setNextState(pinfectionStateExposed);
    ((ExposedInfectionState)pinfectionStateExposed).setNextState(pinfectionStateSymptomaticInfected,pinfectionStateAsymptomaticInfected);
    pinfectionStateSymptomaticInfected.setNextState(pinfectionStateRecovered);
    pinfectionStateAsymptomaticInfected.setNextState(pinfectionStateRecovered);
    pinfectionStateRecovered.setNextState(pinfectionStateSusceptible);

    GridValueLayer vl = new GridValueLayer("cellbox", true, new repast.simphony.space.grid.StrictBorders(), 50, 50);
    context.addValueLayer(vl);
    
    // Add work location
    Location work = new Location("Work", context, space, grid, 5, 20, 6, 9, 2, 40, "Right");
    
    // Get the number of staff from parameters
    Parameters params = RunEnvironment.getInstance().getParameters();
	Integer pintNumAgents = params.getInteger("num_staff"); 
	
    // Create staff agents
    ArrayList<Staff> plstAllStaff = new ArrayList<>();
    for(int i = 0; i < pintNumAgents; i++) {
    	String pstrHomeName = "Home_" + i + "";
        Location home = new Location(pstrHomeName, context, space, grid, (5+(i*3)), 30, 2, 2, 3, 99999999, "Left");
        Staff pNewStaff = new Staff(space, grid);
    	pNewStaff.setHome(home);
    	pNewStaff.setWork(work);
    	context.add(pNewStaff);
    	pNewStaff.setActualInfectionState(pinfectionStateSusceptible.generateStateForMe(pNewStaff));
    	plstAllStaff.add(pNewStaff);    	
    }
    context.add(new StaffRotaAdder(space, grid, plstAllStaff, 3).WithDaysOn(5));

    
    // add Agents 
		/*
		 * for (int i = 0; i < 2; i++) { context.add(new Doctor(space, grid)); } for
		 * (int i = 0; i < 7; i++) { context.add(new Nurse(space, grid)); } for (int i =
		 * 0; i < 2; i++) { context.add(new ENP(space, grid)); }
		 */

    for (Object obj : context) {
      NdPoint pt = space.getLocation(obj);
      grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());
    }


    return context;
  }
}
